apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredpods
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredPods
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            labels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  allowedRegex:
                    type: string
            exemptNamespaces:
              type: array
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
         package k8srequiredpods


          # https://kubesec.io/basics/containers-resources-limits-memory
          violation[{"msg": msg, "details": {}}] {
          container := input.spec.template.spec.containers[_]
          not container.resources.requests.memory
          msg = sprintf("%s in the %s %s does not have a memory requests set", [container.name, input.kind, input.metadata.name])
          }
          # https://kubesec.io/basics/containers-resources-limits-cpu/
          violation[{"msg": msg, "details": {}}] {
           container := input.spec.template.spec.containers[_]
           not container.resources.requests.cpu
            msg = sprintf("%s in the %s %s does not have a CPU requests set", [container.name, input.kind, input.metadata.name])
            }

          # https://kubesec.io/basics/containers-resources-limits-memory
          violation[{"msg": msg, "details": {}}] {
            container := input.spec.template.spec.containers[_]
            not container.resources.limits.memory
            msg = sprintf("%s in the %s %s does not have a memory limit set", [container.name, input.kind, input.metadata.name])
          }

          # https://kubesec.io/basics/containers-resources-limits-cpu/
          violation[{"msg": msg, "details": {}}] {
            container := input.spec.template.spec.containers[_]
            not container.resources.limits.cpu
            msg = sprintf("%s in the %s %s does not have a CPU limit set", [container.name, input.kind, input.metadata.name])
          }


            # https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#create-a-pod-that-gets-assigned-a-qos-class-of-guaranteed
            violation[{"msg": msg, "details": {}}] {
              container := input.spec.template.spec.containers[_]
              container.resources.requests.memory = container.resources.limits.memory
                container.resources.requests.cpu = container.resources.limits.cpu
              msg = sprintf("%s in the %s %s does not have QoS class of Guaranteed", [container.name, input.kind, input.metadata.name])
            }


              # https://kubesec.io/basics/containers-securitycontext-privileged-true/
              violation[{"msg": msg, "details": {}}] {
                container := input.spec.template.spec.containers[_]
                container.securityContext.privileged
                msg = sprintf("%s in the %s %s is privileged", [container.name, input.kind, input.metadata.name])
              }

            # https://kubesec.io/basics/containers-securitycontext-readonlyrootfilesystem-true/
            violation[{"msg": msg, "details": {}}] {
              container := input.spec.template.spec.containers[_]
              not container.securityContext.readOnlyRootFilesystem = true
              msg = sprintf("%s in the %s %s is not using a read only root filesystem", [container.name, input.kind, input.metadata.name])
            }


            # https://kubesec.io/basics/containers-securitycontext-runasnonroot-true/
            violation[{"msg": msg, "details": {}}] {
              container := input.spec.template.spec.containers[_]
                container.securityContext.runAsNonRoot
              not container.securityContext.runAsNonRoot = true
              msg = sprintf("%s in the %s %s has ability to run as roott", [container.name, input.kind, input.metadata.name])
            }

            # https://kubesec.io/basics/containers-securitycontext-runasuser/
            violation[{"msg": msg, "details": {}}] {
              container := input.spec.template.spec.containers[_]
              container.securityContext.runAsUser < 1000
              msg = sprintf("%s in the %s %s has a UID of less than 1000", [container.name, input.kind, input.metadata.name])
            }


          # https://kubesec.io/basics/spec-volumes-hostpath-path-var-run-docker-sock/
          violation[{"msg": msg, "details": {}}] {
            volume := input.spec.template.spec.volumes[_]
            volume.hostpath.path
            msg = sprintf("The %s %s is mounting hostpath %s", [input.kind, input.metadata.name, volume.hostpath.path])
          }

          # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command
          violation[{"msg": msg, "details": {}}] {
            container := input.spec.template.spec.containers[_]
            not container.livenessProbe
            msg = sprintf("%s in the %s %s is missing livenessProbe", [container.name, input.kind, input.metadata.name])
          }


          # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes
          violation[{"msg": msg, "details": {}}] {
            container := input.spec.template.spec.containers[_]
            not container.readinessProbe
            msg = sprintf("%s in the %s %s is missing readinessProbe", [container.name, input.kind, input.metadata.name])
          }


